{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Bhakta_ICL3","provenance":[],"authorship_tag":"ABX9TyOEYocuSSpoZoM5oVpNdhsf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"iqaXnKrDZAfZ"},"outputs":[],"source":["import seaborn as sns\n","import numpy as np\n","import pandas as pd\n","# import matplotlib.pyplot as plt\n","\n","pd.set_option('display.max_rows',5000)\n","pd.options.display.max_columns = None\n","pd.set_option('display.width', 1000)\n","\n","# part1\n","# create a class called 'incident' with a constructor that takes in three parameters: a dataframe, an incident_type, \n","# and country, then sets these parameters to class variables\n","class incident:\n","\n","  def __init__(self, casdata, incident_type, country):\n","    self.dafr = casdata\n","    self.incident_type = incident_type\n","    self.country = country\n","\n","# part 2\n","# In the class you just created, create a function called col_means() that takes in a list of cols. This function \n","# should iterate over each column passed in for the class dataframe you set, calculate the mean if it is a numeric \n","# type, and then print the mean with formatting \"The mean for column x is .... \" with one mean per line. If the column \n","# is not a numeric type you should print 'Column x not a numeric type' where x is the name of the column. \n","  def col_means(self):\n","    cols = self.dafr.columns\n","    i = 0\n","    for item in cols:\n","      if type(self.dafr[item].iloc[0]) == str:\n","        print ('\\nThe column', self.dafr.columns[i],\"contains no numbers in it.\")\n","        i+=1\n","      else:\n","        print ('\\nThe mean of the column', self.dafr.columns[i], 'is: ', self.dafr[item].mean())\n","        i+=1\n","    del i\n","\n","# part 2\n","# Create another function called state_query which will take in a list of states, and then returns the rows which \n","# contain that state abbreviation\n","  def state_query(self, states):\n","    for x in range(self.dafr.__len__()):\n","      if (set(states).issubset(self.dafr['state'])):\n","        print (self.dafr.groupby('state').iloc[x])\n","\n","\n","# part 1\n","# From the seaborn pre-built datasets import 'car_crashes' as a dataframe\n","ccdf = sns.load_dataset('car_crashes')\n","\n","# part 1\n","# Rename the column 'abbrev' to 'state' \n","ccdf.rename(columns={'abbrev': 'state'}, inplace = True) # overriding because it wont show up in the original one\n","print(ccdf)\n","\n","# part 2\n","# Create an object of this class called testing, and pass in the dataframe from seaborn, 'accidents' as the incident type, and 'US' as the country\n","testing = incident(ccdf, 'accidents', 'US')\n","\n","# part 2\n","# In the class you just created, create a function called col_means() that takes in a list of cols. This function \n","# should iterate over each column passed in for the class dataframe you set, calculate the mean if it is a numeric \n","# type, and then print the mean with formatting \"The mean for column x is .... \" with one mean per line. If the column \n","# is not a numeric type you should print 'Column x not a numeric type' where x is the name of the column. \n","testing.col_means()\n","testing.state_query(['MO'])\n"]}]}